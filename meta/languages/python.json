{
  "meta": {
    "keyword": "and elif is global as in if from raise for except finally print import pass return exec else break not with class assert yield try while continue del or def lambda nonlocal|10 None True False",
    "built_in": "Ellipsis NotImplemented"
  },
  "syntax": {
    "pairs": [
      { "open": 1, "close": 2 },
      { "open": 3, "close": 4 },
      { "open": 5, "close": 6 }
    ],
    "single_line_comment": "#"
  },
  "root": {
    "illegal": "(<\\/|->|\\?)",
    "contains": [
      { "className": "operator", "begin": "\\{", "extra": 1 },
      { "className": "operator", "begin": "\\}", "extra": 2 },
      { "className": "operator", "begin": "\\(", "extra": 3 },
      { "className": "operator", "begin": "\\)", "extra": 4 },
      { "className": "operator", "begin": "\\[", "extra": 5 },
      { "className": "operator", "begin": "\\]", "extra": 6 },
      {
        "className": "ident",
        "begin": "[a-zA-Z_]\\w*"
      },
      {
        "className": "comment",
        "begin": "#",
        "end": "$"
      },
      {
        "className": "string",
        "contains": [],
        "begin": "(u|b)?r?'''",
        "end": "'''"
      },
      {
        "className": "string",
        "contains": [],
        "begin": "(u|b)?r?\"\"\"",
        "end": "\"\"\""
      },
      {
        "className": "string",
        "contains": [
          {
            "begin": "\\\\[\\s\\S]"
          }
        ],
        "begin": "(u|r|ur)'",
        "end": "'"
      },
      {
        "className": "string",
        "contains": [
          {
            "begin": "\\\\[\\s\\S]"
          }
        ],
        "begin": "(u|r|ur)\"",
        "end": "\""
      },
      {
        "className": "string",
        "contains": [
          {
            "begin": "\\\\[\\s\\S]"
          }
        ],
        "begin": "(b|br)'",
        "end": "'"
      },
      {
        "className": "string",
        "contains": [
          {
            "begin": "\\\\[\\s\\S]"
          }
        ],
        "begin": "(b|br)\"",
        "end": "\""
      },
      {
        "className": "string",
        "contains": [
          {
            "begin": "\\\\[\\s\\S]"
          }
        ],
        "begin": "'",
        "end": "'",
        "illegal": "\\n"
      },
      {
        "className": "string",
        "contains": [
          {
            "begin": "\\\\[\\s\\S]"
          }
        ],
        "begin": "\"",
        "end": "\"",
        "illegal": "\\n"
      },
      {
        "className": "number",
        "begin": "\\b(0b[01]+)[lLjJ]?"
      },
      {
        "className": "number",
        "begin": "\\b(0o[0-7]+)[lLjJ]?"
      },
      {
        "className": "number",
        "begin": "\\b(0[xX][a-fA-F0-9]+|(\\d+(\\.\\d*)?|\\.\\d+)([eE][-+]?\\d+)?)[lLjJ]?"
      }
    ]
  }
}